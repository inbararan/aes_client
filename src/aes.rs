pub type Column = [u8; 4];
pub type Block = [Column; 4];

const S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

const S_BOX_INV: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

pub fn sub_bytes(block: Block) -> Block {
    return [
        sub_word(block[0], &S_BOX),
        sub_word(block[1], &S_BOX),
        sub_word(block[2], &S_BOX),
        sub_word(block[3], &S_BOX)
    ];
}
pub fn sub_bytes_inverse(block: Block) -> Block {
    return [
        sub_word(block[0], &S_BOX_INV),
        sub_word(block[1], &S_BOX_INV),
        sub_word(block[2], &S_BOX_INV),
        sub_word(block[3], &S_BOX_INV)
    ];
}

pub fn shift_rows(block: Block) -> Block {
    return [
        [block[0][0], block[1][1], block[2][2], block[3][3]],
        [block[1][0], block[2][1], block[3][2], block[0][3]],
        [block[2][0], block[3][1], block[0][2], block[1][3]],
        [block[3][0], block[0][1], block[1][2], block[2][3]]
    ];
}

pub fn shift_rows_inverse(block: Block) -> Block {
    return [
        [block[0][0], block[3][1], block[2][2], block[1][3]],
        [block[1][0], block[0][1], block[3][2], block[2][3]],
        [block[2][0], block[1][1], block[0][2], block[3][3]],
        [block[3][0], block[2][1], block[1][2], block[0][3]]
        
    ];
}

const IRREDUCIBLE_POLY: u16 = 0x11B;

pub fn gf_mult(lhf: u8, rhf: u8) -> u8 {
    let mut result: u16 = 0;
    for i in 0..8 {
        if lhf & (1 << i) != 0 {
            result ^= (rhf as u16).checked_shl(i).expect("gf_mult: overflow when shifting RHF");
        }
    }
    for i in (0..8).rev() {
        if result & (1 << i + 8) != 0 {
            result ^= IRREDUCIBLE_POLY << i;
        }
    }
    return u8::try_from(result).expect("gf_mult: overflow in result after reduction");
}

pub fn gf_add_column(lhf: &Column, rhf: &Column) -> Column {
    return [
        lhf[0] ^ rhf[0],
        lhf[1] ^ rhf[1],
        lhf[2] ^ rhf[2],
        lhf[3] ^ rhf[3]
    ]
}

pub fn gf_add_block(lhf: &Block, rhf: &Block) -> Block {
    return [
        gf_add_column(&lhf[0], &rhf[0]),
        gf_add_column(&lhf[1], &rhf[1]),
        gf_add_column(&lhf[2], &rhf[2]),
        gf_add_column(&lhf[3], &rhf[3])
    ]
}

pub const MIX_MATRIX: Block = [
    [2, 3, 1, 1],
    [1, 2, 3, 1],
    [1, 1, 2, 3],
    [3, 1, 1, 2]
];
const MIX_MATRIX_INV: Block = [
    [14, 11, 13, 9],
    [9, 14, 11, 13],
    [13, 9, 14, 11],
    [11, 13, 9, 14]
];

pub fn mix_column(col: Column, matrix: &Block) -> Column {
    return [
        gf_mult(col[0], matrix[0][0]) ^ gf_mult(col[1], matrix[0][1]) ^ gf_mult(col[2], matrix[0][2]) ^ gf_mult(col[3], matrix[0][3]),
        gf_mult(col[0], matrix[1][0]) ^ gf_mult(col[1], matrix[1][1]) ^ gf_mult(col[2], matrix[1][2]) ^ gf_mult(col[3], matrix[1][3]),
        gf_mult(col[0], matrix[2][0]) ^ gf_mult(col[1], matrix[2][1]) ^ gf_mult(col[2], matrix[2][2]) ^ gf_mult(col[3], matrix[2][3]),
        gf_mult(col[0], matrix[3][0]) ^ gf_mult(col[1], matrix[3][1]) ^ gf_mult(col[2], matrix[3][2]) ^ gf_mult(col[3], matrix[3][3]) 
    ];
}

pub fn mix_columns(block: Block) -> Block {
    return [
        mix_column(block[0], &MIX_MATRIX),
        mix_column(block[1], &MIX_MATRIX),
        mix_column(block[2], &MIX_MATRIX),
        mix_column(block[3], &MIX_MATRIX)
    ];
}
pub fn mix_columns_inverse(block: Block) -> Block {
    return [
        mix_column(block[0], &MIX_MATRIX_INV),
        mix_column(block[1], &MIX_MATRIX_INV),
        mix_column(block[2], &MIX_MATRIX_INV),
        mix_column(block[3], &MIX_MATRIX_INV)
    ];
}

pub fn rot_word(col: Column) -> Column {
    return [
        col[1], 
        col[2],
        col[3],
        col[0]
    ];
}

pub fn sub_word(col: Column, s_box: &[u8; 256]) -> Column {
    return [
        s_box[col[0] as usize],
        s_box[col[1] as usize],
        s_box[col[2] as usize],
        s_box[col[3] as usize],
    ];
}

const ROUND_CONSTANTS: [Column; 10] = [
    [0x1, 0, 0, 0],
    [0x2, 0, 0, 0],
    [0x4, 0, 0, 0],
    [0x8, 0, 0, 0],
    [0x10, 0, 0, 0],
    [0x20, 0, 0, 0],
    [0x40, 0, 0, 0],
    [0x80, 0, 0, 0],
    [0x1b, 0, 0, 0],
    [0x36, 0, 0, 0],
];

pub fn add_r_con(col: Column, index: usize) -> Column {
    return gf_add_column(&col, &ROUND_CONSTANTS[index]);
}

pub fn expand_keys(key: Block) -> [Block; 11] {
    let mut keys: [Block; 11] = [[[0u8; 4]; 4]; 11];
    keys[0] = key;
    for index in 1..11 {
        let transformed_last_col = add_r_con(sub_word(rot_word(keys[index-1][3]), &S_BOX), index-1);
        keys[index][0] = gf_add_column(&transformed_last_col, &keys[index-1][0]);
        keys[index][1] = gf_add_column(&keys[index][0], &keys[index-1][1]);
        keys[index][2] = gf_add_column(&keys[index][1], &keys[index-1][2]);
        keys[index][3] = gf_add_column(&keys[index][2], &keys[index-1][3]);
    }
    return keys;
}

pub fn flatten(block: Block) -> [u8; 16] {
    return [
        block[0][0], block[0][1], block[0][2], block[0][3],
        block[1][0], block[1][1], block[1][2], block[1][3],
        block[2][0], block[2][1], block[2][2], block[2][3],
        block[3][0], block[3][1], block[3][2], block[3][3]
    ]
}

pub fn blockify(block: &[u8]) -> Block {
    assert!(block.len() == 16);
    return [
        [block[0], block[1], block[2], block[3]],
        [block[4], block[5], block[6], block[7]],
        [block[8], block[9], block[10], block[11]],
        [block[12], block[13], block[14], block[15]]
    ];
}

pub fn encrypt_block(data: Block, key: Block) -> Block {
    let keys = expand_keys(key);
    let mut result = data;

    result = gf_add_block(&result, &keys[0]);
    for i in 1..10 {
        result = sub_bytes(result);
        result = shift_rows(result);
        result = mix_columns(result);
        result = gf_add_block(&result, &keys[i]);
    }
    result = sub_bytes(result);
    result = shift_rows(result);
    result = gf_add_block(&result, &keys[10]);
    return result;
}

pub fn decrypt_block(data: Block, key: Block) -> Block {
    let keys = expand_keys(key);
    let mut result = data;
    
    result = gf_add_block(&result, &keys[10]);
    result = shift_rows_inverse(result);
    result = sub_bytes_inverse(result);

    for i in (1..10).rev() {
        result = gf_add_block(&result, &keys[i]);
        result = mix_columns_inverse(result);
        result = shift_rows_inverse(result);
        result = sub_bytes_inverse(result);
    }

    result = gf_add_block(&result, &keys[0]);
    
    return result;
}


pub fn encrypt(data: &[u8], key: &[u8]) -> [u8; 16] {
    flatten(encrypt_block(blockify(data), blockify(key)))
}
pub fn decrypt(data: &[u8], key: &[u8]) -> [u8; 16] {
    flatten(decrypt_block(blockify(data), blockify(key)))
}
